// <auto-generated />
using System;
using AspNetCoreBank.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AspNetCoreBank.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099");

            modelBuilder.Entity("AspNetCoreBank.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("Document");

                    b.Property<string>("Lastname")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new { Id = 1, Date = new DateTime(2019, 8, 23, 14, 57, 30, 469, DateTimeKind.Local), Document = 95699120, Lastname = "Umanchuk", Name = "Jury" },
                        new { Id = 2, Date = new DateTime(2019, 8, 23, 14, 57, 30, 470, DateTimeKind.Local), Document = 95598062, Lastname = "Perez", Name = "Linda" }
                    );
                });

            modelBuilder.Entity("AspNetCoreBank.Models.Movements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MovementsTypeId");

                    b.Property<int>("ProductsId");

                    b.Property<decimal>("amount");

                    b.Property<DateTime>("date");

                    b.Property<int>("status");

                    b.HasKey("Id");

                    b.HasIndex("MovementsTypeId");

                    b.HasIndex("ProductsId");

                    b.ToTable("Movements");

                    b.HasData(
                        new { Id = 1, MovementsTypeId = 1, ProductsId = 1, amount = 150m, date = new DateTime(2019, 8, 23, 14, 57, 30, 472, DateTimeKind.Local), status = 1 },
                        new { Id = 2, MovementsTypeId = 2, ProductsId = 1, amount = 100m, date = new DateTime(2019, 8, 23, 14, 57, 30, 472, DateTimeKind.Local), status = 1 }
                    );
                });

            modelBuilder.Entity("AspNetCoreBank.Models.MovementsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Movements_type");

                    b.Property<string>("name");

                    b.Property<int>("status");

                    b.HasKey("Id");

                    b.ToTable("MovementsType");

                    b.HasData(
                        new { Id = 1, Movements_type = 1, name = "Deposito", status = 1 },
                        new { Id = 2, Movements_type = 2, name = "Extracción", status = 1 }
                    );
                });

            modelBuilder.Entity("AspNetCoreBank.Models.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<DateTime?>("Closing_date");

                    b.Property<DateTime>("Opening_date");

                    b.Property<int?>("ProductTypeId");

                    b.Property<decimal>("current_balance");

                    b.Property<int>("status");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new { Id = 1, ClientId = 1, Opening_date = new DateTime(2019, 8, 23, 14, 57, 30, 471, DateTimeKind.Local), ProductTypeId = 1, current_balance = 150m, status = 1 },
                        new { Id = 2, ClientId = 1, Opening_date = new DateTime(2019, 8, 23, 14, 57, 30, 471, DateTimeKind.Local), ProductTypeId = 2, current_balance = 100m, status = 1 },
                        new { Id = 3, ClientId = 2, Opening_date = new DateTime(2019, 8, 23, 14, 57, 30, 471, DateTimeKind.Local), ProductTypeId = 1, current_balance = 500m, status = 1 }
                    );
                });

            modelBuilder.Entity("AspNetCoreBank.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Product_type");

                    b.Property<string>("name");

                    b.Property<int>("status");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new { Id = 1, Product_type = 1, name = "Cuenta Ahorro", status = 1 },
                        new { Id = 2, Product_type = 1, name = "Cuenta Corriente", status = 2 },
                        new { Id = 3, Product_type = 1, name = "Cuenta en Dolares", status = 2 },
                        new { Id = 4, Product_type = 2, name = "Prestamo Personal", status = 3 }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AspNetCoreBank.Models.Movements", b =>
                {
                    b.HasOne("AspNetCoreBank.Models.MovementsType", "MovementsType")
                        .WithMany()
                        .HasForeignKey("MovementsTypeId");

                    b.HasOne("AspNetCoreBank.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AspNetCoreBank.Models.Products", b =>
                {
                    b.HasOne("AspNetCoreBank.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AspNetCoreBank.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
